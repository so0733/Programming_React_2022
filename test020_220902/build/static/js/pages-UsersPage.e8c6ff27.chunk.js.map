{"version":3,"file":"static/js/pages-UsersPage.e8c6ff27.chunk.js","mappings":"mMAkBA,EAfc,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACb,OAAKA,GAED,0BACI,wBACKA,EAAMC,KAAI,SAAAC,GAAI,OACX,yBACI,SAAC,KAAD,CAAMC,GAAE,iBAAYD,EAAKE,IAAzB,SAAgCF,EAAKG,YADhCH,EAAKE,GADH,QAJR,IAYtB,E,oBCZKE,GAAiBC,EAAAA,EAAAA,eAAc,MAIxBC,EAAY,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClBC,GAAiBC,EAAAA,EAAAA,YAAWL,GAC9B,OAAKI,GACDA,EAAeE,MAKnBF,EAAeG,SAASC,KAAKC,QAAQN,QAAQA,MALb,MADJ,IAQnC,ECED,GAAeO,EAAAA,EAAAA,KACX,SAAAC,GAAK,MAAK,CACNjB,MAAOiB,EAAMjB,MAAMA,MADlB,GAGL,CACIkB,SAAAA,EAAAA,IALR,EAduB,SAAC,GAAyB,IAAvBlB,EAAsB,EAAtBA,MAAOkB,EAAe,EAAfA,SAM7B,OAJAC,EAAAA,EAAAA,YAAU,WACFnB,GACJkB,GACH,GAAE,CAACA,EAAUlB,KAEV,iCACI,SAAC,EAAD,CAAOA,MAAOA,KACd,SAACQ,EAAD,CAAWC,QAASS,MAG/B,ICFD,EAda,SAAC,GAAc,IAAZhB,EAAW,EAAXA,KACJkB,EAA0BlB,EAA1BkB,MAAOC,EAAmBnB,EAAnBmB,KAAMhB,EAAaH,EAAbG,SACrB,OACI,4BACI,0BACKA,EADL,KACiBgB,EADjB,QAGA,0BACI,mCADJ,IACoBD,OAI/B,ECaD,EApBsB,SAAC,GAAY,IAAVhB,EAAS,EAATA,GACfF,GAAOoB,EAAAA,EAAAA,KAAY,SAACL,GAAD,OAAWA,EAAMjB,MAAME,IAAvB,IACnBqB,GAAWC,EAAAA,EAAAA,MAcjB,OHFwB,SAAAf,GACxB,IAAMC,GAAiBC,EAAAA,EAAAA,YAAWL,GAC7BI,IACDA,EAAeE,MACnBF,EAAeG,SAASC,KAAKC,QAAQN,QAAQA,MAChD,CGfGgB,EAAa,kBAAMF,GAASG,EAAAA,EAAAA,IAAQtB,GAAvB,KACbe,EAAAA,EAAAA,YAAU,WACFjB,GAAQA,EAAKE,KAAOuB,SAASvB,EAAI,KACrCmB,GAASG,EAAAA,EAAAA,IAAQtB,GACpB,GAAE,CAACmB,EAAUnB,EAAIF,IAQbA,GACE,SAAC,EAAD,CAAMA,KAAMA,IADD,IAErB,E,UCRD,EAZkB,WACd,OACI,iCACI,SAAC,EAAD,KACA,SAAC,KAAD,CACI0B,KAAK,aACLC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OAAe,SAAC,EAAD,CAAe1B,GAAI0B,EAAMC,OAAO3B,IAA/C,MAIvB,C","sources":["components/Users.js","lib/PreloadContext.js","container/UsersContainer.js","components/User.js","container/UserContainer.js","pages/UsersPage.js"],"sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Users = ({ users }) => {\r\n    if (!users) return null;    // users가 유효하지 않다면 아무것도 보여 주지 않음\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {users.map(user => (\r\n                    <li key={user.id}>\r\n                        <Link to={`/users/${user.id}`}>{user.username}</Link>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Users;","import { createContext, useContext } from \"react\";\r\n\r\n// 클라이언트 환경: null\r\n// 서버 환경: { done: false, premises: [] }\r\nconst PreloadContext = createContext(null);\r\nexport default PreloadContext;\r\n\r\n// resolve는 함수 타입임\r\nexport const Preloader = ({ resolve }) => {\r\n    const preloadContext = useContext(PreloadContext);\r\n        if (!preloadContext) return null; // context 값이 유효하지 않다면 아무것도 하지 않음\r\n        if (preloadContext.done) return null; // 이미 작업이 끝났다면 아무것도 하지 않음\r\n\r\n        // promises 배열에 프로미스 등록\r\n        // 설령 resolve 함수가 프로미스를 반환하지 않더라도, 프로미스 취급을 하기 위해\r\n        // Promise.resolve 함수 사용\r\n        preloadContext.promises.push(Promise.resolve(resolve()));\r\n        return null;\r\n};\r\n\r\n// Hook 형태로 사용할 수 있는 함수\r\nexport const usePreloader = resolve => {\r\n    const preloadContext = useContext(PreloadContext);\r\n    if (!preloadContext) return null;\r\n    if (preloadContext.done) return null;\r\n    preloadContext.promises.push(Promise.resolve(resolve()));\r\n};","import React, { useEffect } from \"react\";\r\nimport Users from \"../components/Users\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUsers } from \"../modules/users\";\r\nimport { Preloader } from \"../lib/PreloadContext\";\r\n\r\nconst UsersContainer = ({ users, getUsers }) => {\r\n    // 컴포넌트가 마운트되고 나서 호출\r\n    useEffect(() => {\r\n        if (users) return;  // users가 이미 유효하다면 요청하지 않음\r\n        getUsers();\r\n    }, [getUsers, users]);\r\n    return (\r\n        <>\r\n            <Users users={users} />\r\n            <Preloader resolve={getUsers} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    state => ({\r\n        users: state.users.users\r\n    }),\r\n    {\r\n        getUsers\r\n    }\r\n)(UsersContainer);","import React from \"react\";\r\n\r\nconst User = ({ user }) => {\r\n    const { email, name, username } = user;\r\n    return (\r\n        <div>\r\n            <h1>\r\n                {username} ({name})\r\n            </h1>\r\n            <p>\r\n                <b>e-mail:</b> {email}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport User from \"../components/User\";\r\n//import { Preloader, usePreloader } from \"../lib/PreloadContext\";\r\nimport { usePreloader } from \"../lib/PreloadContext\";\r\nimport { getUser } from \"../modules/users\";\r\n\r\nconst UserContainer = ({ id }) => {\r\n    const user = useSelector((state) => state.users.user);\r\n    const dispatch = useDispatch();\r\n\r\n    usePreloader(() => dispatch(getUser(id)));  // 서버 사이드 렌더링을 할 때 API 호출하기\r\n    useEffect(() => {\r\n        if (user && user.id === parseInt(id, 10)) return; // 사용자가 존재하고, id가 일치한다면 요청하지 않음\r\n        dispatch(getUser(id));\r\n    }, [dispatch, id, user]); // id가 바뀔 때 새로 요청해야 함\r\n\r\n    // 컨테이너 유효성 검사 후 return null을 해야 하는 경우에\r\n    // null 대신 Preloader 반환\r\n    // if (!user) {\r\n    //     return <Preloader resolve={() => dispatch(getUser(id))} />;\r\n    // }\r\n    \r\n    if (!user) return null;\r\n    return <User user={user} />;\r\n};\r\n\r\nexport default UserContainer;","import React from \"react\";\r\nimport UsersContainer from \"../container/UsersContainer\";\r\nimport UserContainer from \"../container/UserContainer\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nconst UsersPage = () => {\r\n    return (\r\n        <>\r\n            <UsersContainer />\r\n            <Route\r\n                path=\"/users/:id\"\r\n                render={({ match }) => <UserContainer id={match.params.id} />}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UsersPage;"],"names":["users","map","user","to","id","username","PreloadContext","createContext","Preloader","resolve","preloadContext","useContext","done","promises","push","Promise","connect","state","getUsers","useEffect","email","name","useSelector","dispatch","useDispatch","usePreloader","getUser","parseInt","path","render","match","params"],"sourceRoot":""}